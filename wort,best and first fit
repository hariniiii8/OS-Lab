#include <stdio.h>

#define MEMORY_SIZE 1000 // Total size of memory

// Process structure
typedef struct Process {
    int id;
    int size;
} Process;

// Memory block structure
typedef struct MemoryBlock {
    int start;
    int end;
    int size;
    int allocated;
} MemoryBlock;

// Function prototypes
void initializeMemory(MemoryBlock memory[], int size);
void printMemory(MemoryBlock memory[], int size);
int firstFit(MemoryBlock memory[], int size, Process process);
int bestFit(MemoryBlock memory[], int size, Process process);
int worstFit(MemoryBlock memory[], int size, Process process);

int main() {
    MemoryBlock memory[MEMORY_SIZE];
    int numBlocks;

    printf("Enter the number of memory blocks: ");
    scanf("%d", &numBlocks);

    initializeMemory(memory, numBlocks);

    int choice;
    printf("Memory Allocation Algorithms:\n");
    printf("1. First Fit\n");
    printf("2. Best Fit\n");
    printf("3. Worst Fit\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    Process process;
    printf("Enter process ID: ");
    scanf("%d", &process.id);
    printf("Enter process size: ");
    scanf("%d", &process.size);

    int allocatedBlockIndex;
    switch (choice) {
        case 1:
            allocatedBlockIndex = firstFit(memory, numBlocks, process);
            break;
        case 2:
            allocatedBlockIndex = bestFit(memory, numBlocks, process);
            break;
        case 3:
            allocatedBlockIndex = worstFit(memory, numBlocks, process);
            break;
        default:
            printf("Invalid choice!\n");
            return 1;
    }

    if (allocatedBlockIndex != -1) {
        printf("Process %d allocated to memory block %d\n", process.id, allocatedBlockIndex);
        printMemory(memory, numBlocks);
    } else {
        printf("Process %d could not be allocated.\n", process.id);
    }

    return 0;
}

void initializeMemory(MemoryBlock memory[], int size) {
    for (int i = 0; i < size; i++) {
        printf("Enter start and end addresses for block %d: ", i);
        scanf("%d %d", &memory[i].start, &memory[i].end);
        memory[i].size = memory[i].end - memory[i].start + 1;
        memory[i].allocated = 0;
    }
}

void printMemory(MemoryBlock memory[], int size) {
    printf("\nMemory Status:\n");
    for (int i = 0; i < size; i++) {
        printf("Block %d: Start: %d, End: %d, Size: %d, Allocated: %s\n",
               i, memory[i].start, memory[i].end, memory[i].size,
               memory[i].allocated ? "Yes" : "No");
    }
}

int firstFit(MemoryBlock memory[], int size, Process process) {
    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= process.size) {
            memory[i].allocated = 1;
            return i;
        }
    }
    return -1;
}

int bestFit(MemoryBlock memory[], int size, Process process) {
    int bestFitIndex = -1;
    int bestFitSize = MEMORY_SIZE + 1;

    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= process.size) {
            if (memory[i].size < bestFitSize) {
                bestFitSize = memory[i].size;
                bestFitIndex = i;
            }
        }
    }

    if (bestFitIndex != -1) {
        memory[bestFitIndex].allocated = 1;
    }

    return bestFitIndex;
}

int worstFit(MemoryBlock memory[], int size, Process process) {
    int worstFitIndex = -1;
    int worstFitSize = -1;

    for (int i = 0; i < size; i++) {
        if (!memory[i].allocated && memory[i].size >= process.size) {
            if (memory[i].size > worstFitSize) {
                worstFitSize = memory[i].size;
                worstFitIndex = i;
            }
        }
    }

    if (worstFitIndex != -1) {
        memory[worstFitIndex].allocated = 1;
    }

    return worstFitIndex;
}
